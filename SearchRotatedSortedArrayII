public class SearchRotatedSortedArrayII {
    public static boolean search(int[] arr, int target) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) return true; // Found the target

            // Handle duplicates: If arr[low] == arr[mid] == arr[high], shrink search space
            if (arr[low] == arr[mid] && arr[mid] == arr[high]) {
                low++;
                high--;
                continue;
            }

            // Check if left half is sorted
            if (arr[low] <= arr[mid]) {
                if (arr[low] <= target && target < arr[mid]) {
                    high = mid - 1; // Search left
                } else {
                    low = mid + 1; // Search right
                }
            }
            // Otherwise, right half is sorted
            else {
                if (arr[mid] < target && target <= arr[high]) {
                    low = mid + 1; // Search right
                } else {
                    high = mid - 1; // Search left
                }
            }
        }
        return false; // Target not found
    }

    public static void main(String[] args) {
        int[] arr = {2, 5, 6, 0, 0, 1, 2}; // Rotated sorted array with duplicates
        int target = 0;

        boolean found = search(arr, target);
        System.out.println("Target " + target + " found: " + found);
    }
}
